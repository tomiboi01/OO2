package ar.edu.unlp.info.oo2.facturacion_llamadas;

import java.util.ArrayList;
import java.util.List;

public class Empresa {
	private List<Cliente> clientes = new ArrayList<Cliente>();
	private List<Llamada> llamadas = new ArrayList<Llamada>();
	private GestorNumerosDisponibles guia = new GestorNumerosDisponibles();

	static double descuentoJur = 0.15;
	static double descuentoFis = 0;

	public boolean agregarNumeroTelefono(String str) {
		boolean encontre = guia.getLineas().contains(str);
		if (!encontre) {
			guia.getLineas().add(str);
			encontre= true;
			return encontre;
		}
		else {
			encontre= false;
			return encontre;
		}
	}

	public String obtenerNumeroLibre() {
		return guia.obtenerNumeroLibre();
	}

	public Cliente registrarUsuario(String data, String nombre, String tipo) {
		Cliente var = new Cliente();
		if (tipo.equals("fisica")) {
			var.setNombre(nombre);
			String tel = this.obtenerNumeroLibre();
			var.setTipo(tipo);
			var.setNumeroTelefono(tel);
			var.setDNI(data);
		}
		else if (tipo.equals("juridica")) {
			String tel = this.obtenerNumeroLibre();
			var.setNombre(nombre);
			var.setTipo(tipo);
			var.setNumeroTelefono(tel);
			var.setCuit(data);
		}
		clientes.add(var);
		return var;
	}

	public Llamada registrarLlamada(Cliente origen, Cliente destino, String t, int duracion) {
		Llamada llamada = new Llamada(t, origen.getNumeroTelefono(), destino.getNumeroTelefono(), duracion);
		llamadas.add(llamada);
		origen.llamadas.add(llamada);
		return llamada;
	}

	public double calcularMontoTotalLlamadas(Cliente cliente) {
		double c = 0;
		for (Llamada l : cliente.llamadas) {
			double auxc = 0;
			if (l.getTipoDeLlamada() == "nacional") {
				// el precio es de 3 pesos por segundo más IVA sin adicional por establecer la llamada
				auxc += l.getDuracion() * 3 + (l.getDuracion() * 3 * 0.21);
			} else if (l.getTipoDeLlamada() == "internacional") {
				// el precio es de 150 pesos por segundo más IVA más 50 pesos por establecer la llamada
				auxc += l.getDuracion() * 150 + (l.getDuracion() * 150 * 0.21) + 50;
			}

			if (cliente.getTipo() == "fisica") {
				auxc -= auxc*descuentoFis;
			} else if(cliente.getTipo() == "juridica") {
				auxc -= auxc*descuentoJur;
			}
			c += auxc;
		}
		return c;
	}

	public int cantidadDeUsuarios() {
		return clientes.size();
	}

	public boolean existeUsuario(Cliente persona) {
		return clientes.contains(persona);
	}

	public GestorNumerosDisponibles getGestorNumeros() {
		return this.guia;
	}
}
metodo agregarNumeroDeTelefono()
Bad smell: Envidia de atributos
Solución 
Exctract? y Move method

public class GestorDeNumerosDisponibles {

    ..

   public boolean agregarNumeroTelefono(String str) {
		boolean encontre = guia.getLineas().contains(str);
		if (!encontre) {
			guia.getLineas().add(str);
			encontre= true;
			return encontre;
		}
		else {
			encontre= false;
			return encontre;
		}
	}
    ..
}
Bad smell 2: temporary field encontre
solucion: replace temp with query
public boolean agregarNumeroTelefono(String str) {
		if (!guia.getLineas().contains(str)) {
			guia.getLineas().add(str);
			return true;
		}
		else {
			return false;
		}
	}

public class Empresa{
     public boolean agregarNumeroTelefono(String str, GestorDeNumerosDisponibles guia) {
        return guia.agregarNumeroTelefono(str)
        
     }
}

Bad smell 3 metodo registrarLlamada feature envy
Solución extract y move method a Cliente

public class Cliente
{
public Llamada registrarLlamada(Cliente destino, String t, int duracion) {
		Llamada llamada = new Llamada(t, origen.getNumeroTelefono(), destino.getNumeroTelefono(), duracion);
		llamadas.add(llamada);
		this.llamadas.add(llamada);
		return llamada;
	}

}

public class Empresa{
    public Llamada registrarLlamada(Cliente origen, Cliente destino, String t, int duracion) {
        this.llamadas.add(origen.registrarLlamadas(destino, t, duracion));
    }
}

bad smell 3 long parameter list
solución : introduce parameter object

public class Cliente
{
public Llamada registrarLlamada(Llamada ll) {
		this.llamadas.add(llamada);
		return llamada;
	}

}
public class Empresa{
    public Llamada registrarLlamada(Cliente origen, Cliente destino, String t, int duracion) {
		Llamada llamada = new Llamada(t, origen.getNumeroTelefono(), destino.getNumeroTelefono(), duracion);
        this.llamadas.add(origen.registrarLlamadas(destino, t, duracion));
    }
}


bad smell 4 metodo 
public double calcularMontoTotalLlamadas(Cliente cliente) {
		double c = 0;
		for (Llamada l : cliente.llamadas) {
			double auxc = 0;
			if (l.getTipoDeLlamada() == "nacional") {
				// el precio es de 3 pesos por segundo más IVA sin adicional por establecer la llamada
				auxc += l.getDuracion() * 3 + (l.getDuracion() * 3 * 0.21);
			} else if (l.getTipoDeLlamada() == "internacional") {
				// el precio es de 150 pesos por segundo más IVA más 50 pesos por establecer la llamada
				auxc += l.getDuracion() * 150 + (l.getDuracion() * 150 * 0.21) + 50;
			}

			if (cliente.getTipo() == "fisica") {
				auxc -= auxc*descuentoFis;
			} else if(cliente.getTipo() == "juridica") {
				auxc -= auxc*descuentoJur;
			}
			c += auxc;
		}
		return c;
	}
    long method
    solución extract y move method
public double calcularMontoTotalLlamadas(Cliente cliente) {
		double c = 0;
		for (Llamada l : cliente.llamadas) {
             double auxc = 0;
            auxc += l.calcularMontoPorTipoDeLlamada(cliente)
            auxc += cliente.calcularAdicionalPorTipoDeCliente()
			c += auxc;
		}
		return c;
	}

    en Llamada, uso las variables de instancia y mando por parámetro el cliente
    public double calcularMontoPorTipoDeLlamada()
    {
        double auxc = 0;
			if (getTipoDeLlamada() == "nacional") {
				// el precio es de 3 pesos por segundo más IVA sin adicional por establecer la llamada
				auxc += getDuracion() * 3 + (getDuracion() * 3 * 0.21);
			} else if (getTipoDeLlamada() == "internacional") {
				// el precio es de 150 pesos por segundo más IVA más 50 pesos por establecer la llamada
				auxc += getDuracion() * 150 + (getDuracion() * 150 * 0.21) + 50;
			}
			return auxc;
    }

    en Cliente, uso la variable de instancia tipo y paso por parametros descuentofis y descuentojur
    public double calcularAdicionalPorTipoDeCliente(Cliente cliente, double descuentofis, double descuentojur){
        if (getTipo() == "fisica") {
            double auxc = 0;
				auxc -= auxc*descuentoFis;
			} else if(getTipo() == "juridica") {
				auxc -= auxc*descuentoJur;
			}
			c += auxc;
    }

    bad smell en metodo calcularllamada, mala asignacion de responsabilidades?
    solución extract method
    public double calcularMontoTotalLlamadas(Cliente cliente) {
		double c = 0;
		for (Llamada l : cliente.llamadas) {
             double auxc = 0;
            auxc = calcularMontoDeLlamada(l);
			c += auxc;
		}
		return c;
	}

    public double calcularMontoDeLlamada(Llamada l)
    {
        double auxc = 0;
        auxc += l.calcularMontoPorTipoDeLlamada(cliente)
        auxc += cliente.calcularAdicionalPorTipoDeCliente()
        return auxc;
    }

    hago move method y uso variable de instancia
    public class Llamada{
        ..
        public double calcularMontoDeLlamada()
        {
            double auxc = 0;
            auxc += l.calcularMonto(this.cliente)
            auxc += cliente.calcularAdicionalPorTipoDeCliente()
            return auxc;
        }
        ..
    }

    bad smell en los metodos calcularMontoDeLlamada y calcularMontoTotalLlamadas, temporary field
    solucion: replace temp with query
public class Llamada{
        ..
        public double calcularMontoDeLlamada()
        {
            return l.calcularMonto(cliente) + cliente.calcularAdicionalPorTipoDeCliente()
        }
        ..
    }
public double calcularMontoTotalLlamadas(Cliente cliente) {
		double c = 0;
		for (Llamada l : cliente.llamadas) {
			c += calcularMontoDeLlamada(l);
		}
		return c;
	}

    bad smell en calcularMontoTotalLlamadas reinventa la rueda
    solucion hago replace for loop with pipeline
public double calcularMontoTotalLlamadas(Cliente cliente) {
		return cliente.llamadas.stream().mapToDouble(l -> l.calcularMontoDeLlamada()).sum();
	}

    bad smell calcularMontoTotalLlamadas feature envy
    hago move method 

    public class cliente {
        public double calcularMontoTotalLlamadas() {
		    return this.llamadas.stream().mapToDouble(l -> l.calcularMontoDeLlamada()).sum();
	    }
    }

    bad smell en llamada.calcularMontoPorTipoDeLlamada ->switch statement

    solución: replace type code with subclasses y replace conditional logic with polymorphism
    paso 1:
    creo la superclase y subclases
    public abstract class Llamada{

    }

    public class LLamadaNacional extends LLamada{

    }
    public class LlamadaInternacional extends LLamada{


    }
paso 2: extract y move method


public abstract Llamada
{
    double auxc = 0;
			if (l.getTipoDeLlamada() == "nacional") {
				// el precio es de 3 pesos por segundo más IVA sin adicional por establecer la llamada
				auxc += l.getDuracion() * 3 + (l.getDuracion() * 3 * 0.21);
			} else if (l.getTipoDeLlamada() == "internacional") {
				// el precio es de 150 pesos por segundo más IVA más 50 pesos por establecer la llamada
				auxc += l.getDuracion() * 150 + (l.getDuracion() * 150 * 0.21) + 50;
			}

			if (cliente.getTipo() == "fisica") {
				auxc -= auxc*descuentoFis;
			} else if(cliente.getTipo() == "juridica") {
				auxc -= auxc*descuentoJur;
			}
			c += auxc;
    
}

hago extract method de vuelta

